const t={ID:"token-action-hud-shadowdark"},e={ID:"token-action-hud-core"},s="1.5",i={attack:"SHADOWDARK.sheet.npc.attacks_label",ability:"SHADOWDARK.class-ability.ability.label",spell:"SHADOWDARK.item_type.spell",perform:"tokenActionHud.shadowdark.perform",herbalism:"tokenActionHud.shadowdark.herbalism",item:"tokenActionHud.template.item",light:"SHADOWDARK.sheet.item.tab.light",feature:"SHADOWDARK.sheet.npc.features_label",melee:"SHADOWDARK.weapon.type.melee",ranged:"SHADOWDARK.weapon.type.ranged",wands:"SHADOWDARK.inventory.section.wands",scrolls:"SHADOWDARK.inventory.section.scrolls",armor:"SHADOWDARK.item_type.armor",basic:"SHADOWDARK.item_type.basic",treasure:"SHADOWDARK.item.treasure",tier:"SHADOWDARK.sheet.player.spells_tier",specialAttack:"SHADOWDARK.sheet.npc.specials_label"},a={inventory:{id:"inventory",name:"SHADOWDARK.sheet.player.tab.inventory",type:"system"},attacks:{id:"attacks",name:"SHADOWDARK.sheet.npc.attacks_label",type:"system"},abilities:{id:"abilities",name:"SHADOWDARK.sheet.abilities.label",type:"system"},spells:{id:"spells",name:"SHADOWDARK.sheet.player.spells",type:"system"},perform:{id:"perform",name:"tokenActionHud.shadowdark.perform",type:"system"},herbalism:{id:"herbalism",name:"tokenActionHud.shadowdark.herbalism",type:"system"},light:{id:"light",name:"SHADOWDARK.sheet.item.tab.light",type:"system"},features:{id:"features",name:"SHADOWDARK.sheet.npc.features_label",type:"system"},talents:{id:"talents",name:"SHADOWDARK.class.talents.label",type:"system"}},n={str:{name:"SHADOWDARK.ability_strength"},dex:{name:"SHADOWDARK.ability_dexterity"},con:{name:"SHADOWDARK.ability_constitution"},int:{name:"SHADOWDARK.ability_intelligence"},wis:{name:"SHADOWDARK.ability_wisdom"},cha:{name:"SHADOWDARK.ability_charisma"}},o={thrown:'<i class="fa-solid fa-share"></i>',wand:'<i class="fa-solid fa-wand-magic-sparkles"></i>',scroll:'<i class="fa-solid fa-scroll"></i>',flame:'<i class="fa-solid fa-fire-flame-curved"></i>',close:'<i class="fa-solid fa-circle-c"></i>',near:'<i class="fa-solid fa-circle-n"></i>',far:'<i class="fa-solid fa-circle-f"></i>',self:'<i class="fa-solid fa-circle-user"></i>'};let l=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{l=class Utils{static getSetting(s,i=null){let a=i??null;try{a=game.settings.get(t.ID,s)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}return a}static async setSetting(s,i){try{i=await game.settings.set(t.ID,s,i),e.api.Logger.debug(`Setting '${s}' set to '${i}'`)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{function getBonusString(t){return` (${t>=0?"+":""}${t})`}function _toTitleCase(t){return t.replace(/\w\S*/g,(function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()}))}c=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;async buildSystemActions(e){this.actors=this.actor?[this.actor]:this.#t(),this.actorType=this.actor?.type;if(!this.actorType||["Player","NPC","Light"].includes(this.actorType)){if(this.showAttackBonus=l.getSetting("showAttackBonus"),this.showAbilityBonus=l.getSetting("showAbilityBonus"),this.wandScrollIcon=l.getSetting("wandScrollIcon"),this.hideLantern=l.getSetting("hideLantern"),this.showAttackRanges=l.getSetting("showAttackRanges"),this.showSpellRanges=l.getSetting("showSpellRanges"),this.hideLost=l.getSetting("hideLost"),this.actor){let e=Array.from(this.actor?.items);e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=l.getSetting("abbreviateSkills"),this.addAuxiliaryActions=l.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=l.getSetting("addDamageAndCritical"),this.addStowedItems=l.getSetting("addStowedItems"),this.addUnequippedItems=l.getSetting("addUnequippedItems"),this.calculateAttackPenalty=l.getSetting("calculateAttackPenalty"),this.colorSkills=l.getSetting("colorSkills"),this.showAttackImages=l.getSetting("showAttackImages"),this.showAttackNames=l.getSetting("showAttackNames"),this.splitAttacks=l.getSetting("splitAttacks"),this.groupIds=e,"Player"===this.actorType?await this.#e():"NPC"===this.actorType?await this.#s():this.actor||this.#i()}}async#e(){await Promise.all([this.#a(),this.#n(),this.#o(a.perform,"Perform","Perform"),this.#o(a.herbalism,"Herbalism","Herbal Remedy"),this.#l(),this.#c(),this.#r(),this.#d()])}async#s(){this.actor?.backgroundItems?.class,await Promise.all([this.#h(),this.#m(),this.#g(),this.#a()])}async#i(){await Promise.all([this.#a()])}#t(){const t=["Player","NPC"],e=canvas.tokens.controlled.map((t=>t.actor));if(e.every((e=>t.includes(e?.type))))return e}async#l(){const e=this.actor?.itemTypes.Weapon.filter((t=>!t.system.stashed));if(!e||0===e?.length)return;const s="attack",n=[],l=[];for(const t of e){const e=this.actor?.calcWeaponMasterBonus(t),i=await t.isFinesseWeapon()?Math.max(this.actor?.attackBonus("melee"),this.actor?.attackBonus("ranged")):this.actor?.attackBonus(t.system.type);if("melee"===t.system.type){const a=i+this.actor?.system.bonuses.meleeAttackBonus+t.system.bonuses.attackBonus+e;if(n.push(new Action(t,s,{name:t.name+(this.showAttackBonus?getBonusString(a):""),range:this.showAttackRanges?"close":void 0})),await t.hasProperty("thrown")){const a=i+parseInt(this.actor?.system.bonuses.rangedAttackBonus,10)+parseInt(t.system.bonuses.attackBonus,10)+e;l.push(new Action(t,s,{icon2:o.thrown,name:t.name+(this.showAttackBonus?getBonusString(a):""),range:this.showAttackRanges?t.system.range:void 0}));continue}}else if("ranged"===t.system.type){const a=i+this.actor?.system.bonuses.rangedAttackBonus+t.system.bonuses.attackBonus+e;l.push(new Action(t,s,{name:t.name+(this.showAttackBonus?getBonusString(a):""),range:this.showAttackRanges?t.system.range:void 0}))}}if(n.length>0){const e={id:"melee",name:t.api.Utils.i18n(i.melee),type:"system-derived"};this.addGroup(e,a.attacks),this.addActions(n,e)}if(l.length>0){const e={id:"ranged",name:t.api.Utils.i18n(i.ranged),type:"system-derived"};this.addGroup(e,a.attacks),this.addActions(l,e)}}async#a(){const e="ability",s=await Promise.all(["str","dex","con","int","wis","cha"].map((async s=>{const i=s,a=t.api.Utils.i18n(n[s].name)+(this.showAbilityBonus&&this.actor?getBonusString(this.actor?.system.abilities[s].mod):""),o=[e,i].join(this.delimiter);return{id:i,name:a,encodedValue:o}})));this.addActions(s,a.abilities)}async#n(){const e="spell",s=this.actor?.itemTypes.Spell;if(s.length>0){const n=[];for(const t of s)n.includes(t.system.tier)||n.push(t.system.tier);for(const o of n){const n={id:`tier${o}`,name:`${t.api.Utils.i18n(i.tier)} ${o}`,type:"system-derived"},l=this.hideLost?s.filter((t=>t.system.tier===o&&!t.system.lost)):s.filter((t=>t.system.tier===o)),c=l.map((t=>(console.log(o),console.log(l),new Action(t,e,{range:this.showSpellRanges?t.system.range:void 0,cssClass:t.system.lost?"tah-shadowdark-lost":""}))));this.addGroup(n,a.spells),this.addActions(c,n)}}const n=this.actor?.itemTypes.Wand.filter((t=>t.system.class.includes(this.actor?.system.class)||this.actor.itemTypes.Talent.find((t=>"Magical Dabbler"===t.name)))),l=this.hideLost?n.filter((t=>!t.system.lost&&!t.system.stashed)):n;if(l.length>0){const s={id:"spells_wands",name:t.api.Utils.i18n(i.wands),type:"system-derived"},n=l.map((t=>new Action(t,e,{name:t.system.spellName,icon2:this.wandScrollIcon?o.wand:void 0,range:this.showSpellRanges?t.system.range:void 0,cssClass:t.system.lost?"tah-shadowdark-lost":""})));this.addGroup(s,a.spells),this.addActions(n,s)}const c=this.actor?.itemTypes.Scroll.filter((t=>t.system.class.includes(this.actor?.system.class)||this.actor.itemTypes.Talent.find((t=>"Magical Dabbler"===t.name)))),r=c.filter((t=>!t.system.stashed));if(r.length>0){const s={id:"spells_scrolls",name:t.api.Utils.i18n(i.scrolls),type:"system-derived"},n=r.map((t=>new Action(t,e,{name:t.system.spellName,icon2:this.wandScrollIcon?o.scroll:void 0,range:this.showSpellRanges?t.system.range:void 0})));this.addGroup(s,a.spells),this.addActions(n,s)}}#m(){const t=this.actor?.itemTypes["NPC Spell"];if(!t||0===t?.length)return;const e=[...this.hideLost?t.filter((t=>!t.system?.lost)):t].map((t=>new Action(t,"npcSpell",{cssClass:t.system?.lost?"tah-shadowdark-lost":""})));this.addActions(e,a.spells)}async#o(t,e,s){if(this.actor.itemTypes.Talent.find((t=>t.name===e))){const e=this.actor?.itemTypes["Class Ability"].filter((t=>t.system.group===s));if(!e||0===e?.length)return;const i="classAbility",a=[...this.hideLost?e.filter((t=>!t.system?.lost)):e].map((t=>new Action(t,i,{cssClass:t.system?.lost?"tah-shadowdark-lost":""})));this.addActions(a,t)}}async#r(){const t=this.actor?.itemTypes.Talent;if(!t||0===t?.length)return;const e=t.map((t=>new Action(t,"item")));this.addActions(e,a.talents)}async#c(){const e="item",s=["Armor","Basic","Potion","Scroll","Wand","Weapon"],n=["Gem"],o=[];for(const n of s){const s=this.actor?.itemTypes[n].filter((t=>!t.system.stashed));if(!s||0===s?.length)continue;const l=[];for(const t of s)t.system.treasure?o.push(t):l.push(t);const c={id:`inventory_${n.slugify()}`,name:t.api.Utils.i18n(i[n.slugify()]),type:"system-derived"};if(l.length>0){this.addGroup(c,a.inventory);const t=l.map((t=>new Action(t,e)));this.addActions(t,c)}}for(const t of n)for(const e of this.actor?.itemTypes[t])o.push(e);if(!o||0===o?.length)return;const l={id:"inventory_treasure",name:t.api.Utils.i18n(i.treasure),type:"system-derived"},c=o.map((t=>new Action(t,e)));this.addGroup(l,a.inventory),this.addActions(c,l)}async#d(){const t="light",e=[];for(const t of this.actor?.itemTypes.Basic.filter((t=>t.system.light.isSource)))t.system.light.remainingSecs&&(this.hideLantern&&"Oil, Flask"===t.name?this.actor?.itemTypes.Basic.some((t=>"Lantern"===t.name))&&e.push(t):e.push(t));const s=await Promise.all(e.map((async e=>e.system.light.active?new Action(e,t,{icon2:o.flame,cssClass:"toggle active"}):new Action(e,t,{cssClass:"toggle"}))));this.addActions(s,a.light)}async#h(){const e=this.actor?.itemTypes["NPC Attack"],s=this.actor?.itemTypes["NPC Special Attack"];if(!e&&!s||0===e?.length&&0===s?.length)return;const n=[],l=[];for(const t of e){const e=t.system.ranges;if(e.includes("close")){if(n.push(new Action(t,"npcAttack",{name:_toTitleCase(t.name)+`${this.showAttackBonus?getBonusString(t.system.bonuses.attackBonus):""}`,range:this.showAttackRanges?"close":void 0})),e.includes("near")||e.includes("far")){const s=e.includes("far")?"far":"near";l.push(new Action(t,"npcAttack",{icon2:o.thrown,name:_toTitleCase(t.name)+`${this.showAttackBonus?getBonusString(t.system.bonuses.attackBonus):""}`,range:this.showAttackRanges?s:void 0}));continue}}else if(e.includes("near")||e.includes("far")){const s=e.includes("far")?"far":"near";l.push(new Action(t,"npcAttack",{name:_toTitleCase(t.name)+`${this.showAttackBonus?getBonusString(t.system.bonuses.attackBonus):""}`,range:this.showAttackRanges?s:void 0}))}}if(n.length>0){const e={id:"melee",name:t.api.Utils.i18n(i.melee),type:"system-derived"};this.addGroup(e,a.attacks),this.addActions(n,e)}if(l.length>0){const e={id:"ranged",name:t.api.Utils.i18n(i.ranged),type:"system-derived"};this.addGroup(e,a.attacks),this.addActions(l,e)}if(s.length>0){const e=s.map((t=>new Action(t,"specialAttack",{name:t.name}))),n={id:"specialAttacks",name:t.api.Utils.i18n(i.specialAttack),type:"system-derived"};this.addGroup(n,a.attacks),this.addActions(e,n)}}async#g(){const t=this.actor?.itemTypes["NPC Feature"];if(!t||0===t?.length)return;const e=await Promise.all(t.map((async t=>new Action(t,"feature"))));this.addActions(e,a.features)}};class Action{constructor(e,s,i){this.id=e.id,this.name=i?.name||e.name,this.encodedValue=[s,e.id].join("|"),this.img=t.api.Utils.getImage(e),this.icon1=o[i?.range],this.icon2=i?.icon2,this.cssClass=i?.cssClass}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=a;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const s=Object.values(e);r={layout:[{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.attacks_label"),groups:[{...e.attacks,nestId:"attacks_attacks"}]},{nestId:"specialAttacks",id:"specialAttacks",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.specials_label"),groups:[{...e.specialAttacks,nestId:"specialAttacks_specialAttacks"}]},{nestId:"spells",id:"spells",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.spells"),groups:[{...e.spells,nestId:"spells_spells"}]},{nestId:"perform",id:"perform",name:t.api.Utils.i18n("tokenActionHud.shadowdark.perform"),groups:[{...e.perform,nestId:"perform_perform"}]},{nestId:"herbalism",id:"herbalism",name:t.api.Utils.i18n("tokenActionHud.shadowdark.herbalism"),groups:[{...e.herbalism,nestId:"herbalism_herbalism"}]},{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("SHADOWDARK.sheet.abilities.label"),groups:[{...e.abilities,nestId:"abilities_abilities"}]},{nestId:"talents",id:"talents",name:t.api.Utils.i18n("SHADOWDARK.class.talents.label"),groups:[{...e.talents,nestId:"talents_talents"}]},{nestId:"inventory",id:"inventory",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.tab.inventory"),groups:[{...e.inventory,nestId:"inventory_inventory"}]},{nestId:"light",id:"light",name:t.api.Utils.i18n("SHADOWDARK.sheet.item.tab.light"),groups:[{...e.light,nestId:"light_light"}]},{nestId:"features",id:"features",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.features_label"),groups:[{...e.features,nestId:"features_features"}]}],groups:s}}));let d=null;function register(e){game.settings.register(t.ID,"showAttackBonus",{name:game.i18n.localize("tokenActionHud.shadowdark.setting.showAttackBonus.name"),hint:game.i18n.localize("tokenActionHud.shadowdark.setting.showAttackBonus.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"showAbilityBonus",{name:game.i18n.localize("tokenActionHud.shadowdark.setting.showAbilityBonus.name"),hint:game.i18n.localize("tokenActionHud.shadowdark.setting.showAbilityBonus.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"showAttackRanges",{name:game.i18n.localize("tokenActionHud.shadowdark.setting.showAttackRanges.name"),hint:game.i18n.localize("tokenActionHud.shadowdark.setting.showAttackRanges.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}}),game.settings.register(t.ID,"showSpellRanges",{name:game.i18n.localize("tokenActionHud.shadowdark.setting.showSpellRanges.name"),hint:game.i18n.localize("tokenActionHud.shadowdark.setting.showSpellRanges.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}}),game.settings.register(t.ID,"wandScrollIcon",{name:game.i18n.localize("tokenActionHud.shadowdark.setting.wandScrollIcon.name"),hint:game.i18n.localize("tokenActionHud.shadowdark.setting.wandScrollIcon.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"hideLantern",{name:game.i18n.localize("tokenActionHud.shadowdark.setting.hideLantern.name"),hint:game.i18n.localize("tokenActionHud.shadowdark.setting.hideLantern.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"hideLost",{name:game.i18n.localize("tokenActionHud.shadowdark.setting.hideLost.name"),hint:game.i18n.localize("tokenActionHud.shadowdark.setting.hideLost.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}}),game.settings.register(t.ID,"hideNPCFeatures",{name:game.i18n.localize("tokenActionHud.shadowdark.setting.hideNPCFeatures.name"),hint:game.i18n.localize("tokenActionHud.shadowdark.setting.hideNPCFeatures.hint"),scope:"world",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const s=e.split("|");2!==s.length&&super.throwInvalidValueErr();const i=s[0],a=s[1],n=["Player","NPC"];if(this.actor)return void await this.#p(t,this.actor,this.token,i,a);const o=canvas.tokens.controlled.filter((t=>n.includes(t.actor?.type)));for(const e of o){const s=e.actor;await this.#p(t,s,e,i,a)}}async#p(t,e,s,i,a){switch(i){case"attack":await this.#u(e,a);break;case"npcAttack":await this.#A(e,a);break;case"specialAttack":await this.#y(e,a);break;case"ability":await this.#k(t,e,a);break;case"spell":await this.#f(e,a);break;case"npcSpell":await this.#w(e,a);break;case"item":await this.#b(e,a);break;case"light":await this.#S(e,a);break;case"feature":await this.#D(e,a);break;case"classAbility":await this.#H(e,a)}}async#u(t,e){await t.rollAttack(e)}async#A(t,e){await t.rollAttack(e);const s=l.getSetting("hideNPCFeatures")?"selfroll":void 0,i=t.items.find((s=>"NPC Feature"===s.type&&s.name===t.items.get(e).name));await(i?.displayCard({rollMode:s}))}async#y(t,e){await t.useAbility(e);const s=l.getSetting("hideNPCFeatures")?"selfroll":void 0,i=t.items.find((s=>"NPC Feature"===s.type&&s.name===t.items.get(e).name));await(i?.displayCard({rollMode:s}))}async#k(t,e,s){await e.rollAbility(s,{event:t})}async#f(t,e){await t.castSpell(e)}async#w(t,e){await t.castNPCSpell(e)}async#D(t,e){const s=t.items.get(e),i=l.getSetting("hideNPCFeatures")?"selfroll":void 0;await(s?.displayCard({rollMode:i}))}async#H(t,e){await t.useAbility(e)}async#b(t,e){const s=t.items.get(e);await s.displayCard()}async#S(t,e){const s=t.getEmbeddedDocument("Item",e);await s.parent.sheet._toggleLightSource(s)}}}));let h=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{h=class SystemManager extends t.api.SystemManager{getActionHandler(){return new c}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(t){let e;return e=new d,e}registerSettings(t){register(t)}async registerDefaults(){return r}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:h},Hooks.call("tokenActionHudSystemReady",e)}));export{n as ABILITY,i as ACTION_TYPE,c as ActionHandler,e as CORE_MODULE,r as DEFAULTS,a as GROUP,o as ICON,t as MODULE,s as REQUIRED_CORE_MODULE_VERSION,d as RollHandler,h as SystemManager,l as Utils,register};
