const t={ID:"token-action-hud-shadowdark"},e={ID:"token-action-hud-core"},s="1.5",i={attack:"SHADOWDARK.sheet.npc.attacks_label"},n={attacks:{id:"attacks",name:"SHADOWDARK.sheet.npc.attacks_label",type:"system"}},o={weapon:{groupId:"SHADOWDARK.inventory.section.weapon"}};let a=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{a=class Utils{static getSetting(s,i=null){let n=i??null;try{n=game.settings.get(t.ID,s)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}return n}static async setSetting(s,i){try{i=await game.settings.set(t.ID,s,i),e.api.Logger.debug(`Setting '${s}' set to '${i}'`)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{console.log("Hello!"),l=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;a;async buildSystemActions(e){console.log("~~~~~~building system actions..."),this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,console.log(`actor: ${this.actor.name}`);if(console.log(`actorType = ${this.actorType}`),!this.actorType||["Player","NPC","Light"].includes(this.actorType)){if(this.displayUnequipped=a.getSetting("displayUnequipped"),this.actor){let e=Array.from(this.actor.items);e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=a.getSetting("abbreviateSkills"),this.addAuxiliaryActions=a.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=a.getSetting("addDamageAndCritical"),this.addStowedItems=a.getSetting("addStowedItems"),this.addUnequippedItems=a.getSetting("addUnequippedItems"),this.calculateAttackPenalty=a.getSetting("calculateAttackPenalty"),this.colorSkills=a.getSetting("colorSkills"),this.showStrikeImages=a.getSetting("showStrikeImages"),this.showStrikeNames=a.getSetting("showStrikeNames"),this.splitStrikes=a.getSetting("splitStrikes"),this.groupIds=e,"Player"===this.actorType&&this.#t()}}async#t(){console.log("building player actions"),await Promise.all([this.#e()])}async#e(){console.log("building strikes");const t=this.actor.itemTypes.Weapon;if(!t)return;const e=t.filter((t=>"melee"===t.system.type)),s=t.filter((t=>"ranged"===t.system.type));console.log("melee:"),console.log(e),console.log("ranged:"),console.log(s);const i={id:"attacks",type:"system"},n={id:"melee",name:"Melee",type:"system-derived"},o={id:"ranged",name:"Ranged",type:"system-derived"};this.addGroup(n,i),this.addGroup(o,i);for(const t of e){const e=t.name,s={id:encodeURIComponent(`${t.id}>${e.slugify()}>0>`+t.system.type),name:e,encodedValue:"placeholder"};console.log("adding action:"),console.log(s),this.addActions([s],n)}for(const t of s){const e=t.name,s={id:encodeURIComponent(`${t.id}>${e.slugify()}>0>`+t.system.type),name:e,encodedValue:"placeholder"};console.log("adding action:"),console.log(s),this.addActions([s],o)}}async#s(t,e){return""}async#i(t,e){return""}#n(t){return t?.name??t?.label??""}async#o(){}async#a(){}async#l(){}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{console.log("Core Module:"),console.log(t);const e=n;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const s=Object.values(e);c={layout:[{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.attacks_label"),groups:[{...e.attacks,nestId:"attacks"}]},{nestId:"spells",id:"spells",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.spells"),groups:[{...e.spells,nestId:"spells_spells"}]},{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.tab.abilities"),groups:[{...e.abilities,nestId:"abilities_abilities"}]}],groups:s}}));let r=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class RollHandler extends t.api.RollHandler{async doHandleActionEvent(t,e){const s=e.split("|");2!==s.length&&super.throwInvalidValueErr();const i=s[0],n=s[1];if(["item"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,n);const o=["character"];if(this.actor)return void await this.#c(t,this.actor,this.token,i,n);const a=canvas.tokens.controlled.filter((t=>o.includes(t.actor?.type)));for(const e of a){const s=e.actor;await this.#c(t,s,e,i,n)}}async#c(t,e,s,i,n){switch(i){case"item":this.#r(t,e,n);break;case"utility":this.#d(s,n)}}#r(t,e,s){e.items.get(s).toChat(t)}async#d(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class SystemManager extends t.api.SystemManager{doGetActionHandler(){return new l}getAvailableRollHandlers(){return{core:"Core Template"}}doGetRollHandler(t){let e;return e=new r,e}doRegisterSettings(t){register(t)}async doRegisterDefaultFlags(){return c}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:d},Hooks.call("tokenActionHudSystemReady",e)}));export{i as ACTION_TYPE,l as ActionHandler,e as CORE_MODULE,c as DEFAULTS,n as GROUP,o as ITEM_TYPE,t as MODULE,s as REQUIRED_CORE_MODULE_VERSION,r as RollHandler,d as SystemManager,a as Utils,register};
