const t={ID:"token-action-hud-shadowdark"},e={ID:"token-action-hud-core"},s="1.5",i={attack:"SHADOWDARK.sheet.npc.attacks_label",ability:"SHADOWDARK.class-ability.ability.label",spell:"SHADOWDARK.item_type.spell",item:"tokenActionHud.template.item",light:"SHADOWDARK.sheet.item.tab.light",feature:"SHADOWDARK.sheet.npc.features_label"},n={inventory:{id:"inventory",name:"SHADOWDARK.sheet.player.tab.inventory",type:"system"},attacks:{id:"attacks",name:"SHADOWDARK.sheet.npc.attacks_label",type:"system"},abilities:{id:"abilities",name:"SHADOWDARK.sheet.abilities.label",type:"system"},spells:{id:"spells",name:"SHADOWDARK.sheet.player.spells",type:"system"},light:{id:"light",name:"SHADOWDARK.sheet.item.tab.light",type:"system"},features:{id:"features",name:"SHADOWDARK.sheet.npc.features_label",type:"system"}},a={weapon:{groupId:"SHADOWDARK.inventory.section.weapon"}},l={thrown:"Compendium.shadowdark.properties.Item.c35ROL1nXwC840kC"},o={str:{name:"SHADOWDARK.ability_strength"},dex:{name:"SHADOWDARK.ability_dexterity"},con:{name:"SHADOWDARK.ability_constitution"},int:{name:"SHADOWDARK.ability_intelligence"},wis:{name:"SHADOWDARK.ability_wisdom"},cha:{name:"SHADOWDARK.ability_charisma"}},c={thrown:'<i class="fa-solid fa-share"></i>',wand:'<i class="fa-solid fa-wand-magic-sparkles"></i>',scroll:'<i class="fa-solid fa-scroll"></i>'};let r=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{r=class Utils{static getSetting(s,i=null){let n=i??null;try{n=game.settings.get(t.ID,s)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}return n}static async setSetting(s,i){try{i=await game.settings.set(t.ID,s,i),e.api.Logger.debug(`Setting '${s}' set to '${i}'`)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;a;async buildSystemActions(e){this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type;if(!this.actorType||["Player","NPC","Light"].includes(this.actorType)){if(this.displayUnequipped=r.getSetting("displayUnequipped"),this.actor){let e=Array.from(this.actor.items);e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=r.getSetting("abbreviateSkills"),this.addAuxiliaryActions=r.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=r.getSetting("addDamageAndCritical"),this.addStowedItems=r.getSetting("addStowedItems"),this.addUnequippedItems=r.getSetting("addUnequippedItems"),this.calculateAttackPenalty=r.getSetting("calculateAttackPenalty"),this.colorSkills=r.getSetting("colorSkills"),this.showAttackImages=r.getSetting("showAttackImages"),this.showAttackNames=r.getSetting("showAttackNames"),this.splitAttacks=r.getSetting("splitAttacks"),this.wandScrollIcon=r.getSetting("wandScrollIcon"),this.groupIds=e,"Player"===this.actorType?this.#t():"NPC"===this.actorType&&this.#e()}}async#t(){this.actor.backgroundItems?.class||this.actor._populateBackgroundItems(),await Promise.all([this.#s(),this.#i(),this.#n(),this.#a(),this.#l()])}async#e(){await Promise.all([this.#s(),this.#o(),this.#c()])}async#n(){const t=this.actor.itemTypes.Weapon.filter((t=>!t.system.stashed));if(!t)return;const e="attack",s=[],i=[];for(const n of t)if("melee"===n.system.type){if(s.push(new Action(n,e)),n.system.properties.some((t=>t===l.thrown))){i.push(new Action(n,e,{icon1:c.thrown}));continue}}else"ranged"===n.system.type&&i.push(new Action(n,e));const n={id:"attacks",type:"system"};if(s.length>0){const t={id:"melee",name:"Melee",type:"system-derived"};this.addGroup(t,n),this.addActions(s,t)}if(i.length>0){const t={id:"ranged",name:"Ranged",type:"system-derived"};this.addGroup(t,n),this.addActions(i,t)}}async#s(){const e="ability",s={id:"abilities",name:"Abilities",type:"system"},i=await Promise.all(["str","dex","con","int","wis","cha"].map((async s=>{const i=s,n=t.api.Utils.i18n(o[s].name),a=[e,i].join(this.delimiter);return{id:i,name:n,encodedValue:a}})));this.addActions(i,s)}async#i(){const t="spell",e={id:"spells",name:"Spells",type:"system"},s=this.actor.itemTypes.Spell;if(s.length>0){const i=[];for(const t of s)i.includes(t.system.tier)||i.push(t.system.tier);for(const n of i){const i={id:`tier${n}`,name:`Tier ${n}`,type:"system-derived"},a=s.filter((t=>t.system.tier===n&&!t.system.lost)).map((e=>new Action(e,t)));this.addGroup(i,e),this.addActions(a,i)}}const i=this.actor.itemTypes.Wand.filter((t=>t.system.class.includes(this.actor.system.class)&&!t.system.lost&&!t.system.stashed));if(i.length>0){const s={id:"spells_wands",name:"Wands",type:"system-derived"},n=i.map((e=>this.wandScrollIcon?new Action(e,t,{name:e.system.spellName,icon1:c.wand}):new Action(e,t)));this.addGroup(s,e),this.addActions(n,s)}const n=this.actor.itemTypes.Scroll.filter((t=>t.system.class.includes(this.actor.system.class)&&!t.system.stashed));if(n.length>0){const s={id:"spells_scrolls",name:"Scrolls",type:"system-derived"},i=n.map((e=>this.wandScrollIcon?new Action(e,t,{name:e.system.spellName,icon1:c.scroll}):new Action(e,t)));this.addGroup(s,e),this.addActions(i,s)}}async#a(){const t="item",e=["Armor","Basic","Potion","Scroll","Wand","Weapon"],s=["Gem"],i={id:"inventory",name:"Inventory",type:"system"},n=[];for(const s of e){const e=this.actor.itemTypes[s].filter((t=>!t.system.stashed));if(e.length>0){const a=[];for(const t of e)t.system.treasure?n.push(t):a.push(t);const l={id:`inventory_${s.slugify()}`,name:s,type:"system-derived"};if(a.length>0){this.addGroup(l,i);const e=a.map((e=>new Action(e,t)));this.addActions(e,l)}}}for(const t of s)for(const e of this.actor.itemTypes[t])n.push(e);if(n.length>0){const e={id:"inventory_treasure",name:"Gems and Treasure",type:"system-derived"},s=n.map((e=>new Action(e,t)));this.addGroup(e,i),this.addActions(s,e)}}async#l(){const t="light",e={id:"light",name:"Light",type:"system"},s=this.actor.itemTypes.Basic.filter((t=>t.system.light.isSource)),i=await Promise.all(s.map((async e=>e.system.light.active?new Action(e,t,{icon1:c.flame}):new Action(e,t))));this.addActions(i,e)}async#o(){const t=this.actor.itemTypes["NPC Attack"];if(!t)return;const e="attack",s=[],i=[];for(const n of t){const t=n.system.ranges;if(t.includes("close")){if(s.push(new Action(n,e)),t.includes("near")||t.includes("far")){i.push(new Action(n,e,{icon1:c.thrown}));continue}}else(t.includes("near")||t.includes("far"))&&i.push(new Action(n,e))}const n={id:"attacks",type:"system"};if(s.length>0){const t={id:"melee",name:"Melee",type:"system-derived"};this.addGroup(t,n),this.addActions(s,t)}if(i.length>0){const t={id:"ranged",name:"Ranged",type:"system-derived"};this.addGroup(t,n),this.addActions(i,t)}}async#c(){const t=this.actor.itemTypes["NPC Feature"];if(!t)return;const e={id:"features",name:"Features",type:"system"},s=await Promise.all(t.map((async t=>new Action(t,"feature"))));this.addActions(s,e)}async#r(t,e){return""}async#d(t,e){return""}async#h(t){return t?.name??t?.label??""}async#p(){}async#m(){}};class Action{constructor(e,s,i){this.id=e.id,this.name=i?.name||e.name,this.encodedValue=[s,e.id].join("|"),this.img=t.api.Utils.getImage(e),this.icon1=i?.icon1}}}));let h=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=n;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const s=Object.values(e);h={layout:[{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.attacks_label"),groups:[{...e.attacks,nestId:"attacks_attacks"}]},{nestId:"spells",id:"spells",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.spells"),groups:[{...e.spells,nestId:"spells_spells"}]},{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("SHADOWDARK.sheet.abilities.label"),groups:[{...e.abilities,nestId:"abilities_abilities"}]},{nestId:"inventory",id:"inventory",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.tab.inventory"),groups:[{...e.inventory,nestId:"inventory_inventory"}]},{nestId:"light",id:"light",name:t.api.Utils.i18n("SHADOWDARK.sheet.item.tab.light"),groups:[{...e.light,nestId:"light_light"}]},{nestId:"features",id:"features",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.features_label"),groups:[{...e.features,nestId:"features_features"}]}],groups:s}}));let p=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"wandScrollIcon",{name:"Show Icon for wands and scrolls",hint:"Show icon for wands and scrolls",scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{p=class RollHandler extends t.api.RollHandler{async doHandleActionEvent(t,e){const s=e.split("|");console.log(s),2!==s.length&&super.throwInvalidValueErr();const i=s[0],n=s[1];if(["attack"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,n);const a=["character"];if(this.actor)return void await this.#y(t,this.actor,this.token,i,n);const l=canvas.tokens.controlled.filter((t=>a.includes(t.actor?.type)));for(const e of l){const s=e.actor;await this.#y(t,s,e,i,n)}}async#y(t,e,s,i,n){switch(i){case"attack":await this.#u(t,e,n);break;case"ability":await this.#A(t,e,n);break;case"spell":await this.#g(t,e,n);break;case"item":this.#f(t,e,n);break;case"light":this.#b(t,e,n)}}async#u(t,e,s){e.rollAttack(s)}async#A(t,e,s){e.rollAbility(s,{event:t})}async#g(t,e,s){e.castSpell(s)}#f(t,e,s){e.items.get(s).displayCard()}#b(t,e,s){const i=e.getEmbeddedDocument("Item",s);i.parent.sheet._toggleLightSource(i)}async#S(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let m=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{m=class SystemManager extends t.api.SystemManager{doGetActionHandler(){return new d}getAvailableRollHandlers(){return{core:"Core Template"}}doGetRollHandler(t){let e;return e=new p,e}doRegisterSettings(t){register(t)}async doRegisterDefaultFlags(){return h}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:m},Hooks.call("tokenActionHudSystemReady",e)}));export{o as ABILITY,i as ACTION_TYPE,d as ActionHandler,l as COMPENDIUM_ID,e as CORE_MODULE,h as DEFAULTS,n as GROUP,c as ICON,a as ITEM_TYPE,t as MODULE,s as REQUIRED_CORE_MODULE_VERSION,p as RollHandler,m as SystemManager,r as Utils,register};
