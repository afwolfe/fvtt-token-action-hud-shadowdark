const t={ID:"token-action-hud-shadowdark"},e={ID:"token-action-hud-core"},i="1.5",n={item:"tokenActionHud.template.item",utility:"tokenActionHud.utility"},s={armor:{id:"armor",name:"SHADOWDARK.inventory.section.armor",type:"system"},equipment:{id:"equipment",name:"SHADOWDARK.inventory.section.basic",type:"system"},consumables:{id:"consumables",name:"SHADOWDARK.inventory.section.potions",type:"system"},containers:{id:"containers",name:"tokenActionHud.template.containers",type:"system"},treasure:{id:"treasure",name:"SHADOWDARK.inventory.section.treasure",type:"system"},weapons:{id:"weapons",name:"SHADOWDARK.inventory.section.weapon",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},o={armor:{groupId:"armor"},backpack:{groupId:"containers"},consumable:{groupId:"consumables"},equipment:{groupId:"equipment"},treasure:{groupId:"treasure"},weapon:{groupId:"weapons"}};let a=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{a=class Utils{static getSetting(i,n=null){let s=n??null;try{s=game.settings.get(t.ID,i)}catch{e.api.Logger.debug(`Setting '${i}' not found`)}return s}static async setSetting(i,n){try{n=await game.settings.set(t.ID,i,n),e.api.Logger.debug(`Setting '${i}' set to '${n}'`)}catch{e.api.Logger.debug(`Setting '${i}' not found`)}}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{l=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;a;async buildSystemActions(e){this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type;if(!this.actorType||["Player","NPC","Light"].includes(this.actorType)){if(this.displayUnequipped=a.getSetting("displayUnequipped"),this.actor){let e=Array.from(this.actor.items);e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=a.getSetting("abbreviateSkills"),this.addAuxiliaryActions=a.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=a.getSetting("addDamageAndCritical"),this.addStowedItems=a.getSetting("addStowedItems"),this.addUnequippedItems=a.getSetting("addUnequippedItems"),this.calculateAttackPenalty=a.getSetting("calculateAttackPenalty"),this.colorSkills=a.getSetting("colorSkills"),this.showStrikeImages=a.getSetting("showStrikeImages"),this.showStrikeNames=a.getSetting("showStrikeNames"),this.splitStrikes=a.getSetting("splitStrikes"),this.groupIds=e,"Player"===this.actorType?this.#t():"NPC"===this.actorType?this.#e():"Light"===this.actorType?this.#i():this.actor||this.#n()}}async#t(){await Promise.all([this.#s()])}async#s(){const e="Weapon",i={id:"weapon",type:"system"},s=this.actor.items.filter((t=>t.type===e));if(s)for(const e of s){let s=null;const o=`strikes+${`${e.id}-${e.name}`}`,a=e.name,l=`${t.api.Utils.i18n(n.Weapon)}: ${e.name} (${e.id})`,r=e.img;s={id:o,name:a,listName:l,type:"system-derived",settings:{showTitle:this.showStrikeNames},tooltip:tooltip},this.showStrikeImages&&(s.settings.image=r),this.addGroup(s,i)}}async#e(){}async#i(){}async#n(){}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=s;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const i=Object.values(e);r={layout:[{nestId:"attack",id:"attack",name:t.api.Utils.i18n("Attacks"),groups:[{...e.weapons,nestId:"inventory_weapons"}]},{nestId:"utility",id:"utility",name:t.api.Utils.i18n("tokenActionHud.utility"),groups:[{...e.combat,nestId:"utility_combat"},{...e.token,nestId:"utility_token"},{...e.rests,nestId:"utility_rests"},{...e.utility,nestId:"utility_utility"}]}],groups:i}}));let c=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{c=class RollHandler extends t.api.RollHandler{async doHandleActionEvent(t,e){const i=e.split("|");2!==i.length&&super.throwInvalidValueErr();const n=i[0],s=i[1];if(["item"].includes(n)&&this.isRenderItem())return this.doRenderItem(this.actor,s);const o=["character"];if(this.actor)return void await this.#o(t,this.actor,this.token,n,s);const a=canvas.tokens.controlled.filter((t=>o.includes(t.actor?.type)));for(const e of a){const i=e.actor;await this.#o(t,i,e,n,s)}}async#o(t,e,i,n,s){switch(n){case"item":this.#a(t,e,s);break;case"utility":this.#l(i,s)}}#a(t,e,i){e.items.get(i).toChat(t)}async#l(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class SystemManager extends t.api.SystemManager{doGetActionHandler(){return new l}getAvailableRollHandlers(){return{core:"Core Template"}}doGetRollHandler(t){let e;return e=new c,e}doRegisterSettings(t){register(t)}async doRegisterDefaultFlags(){return r}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:d},Hooks.call("tokenActionHudSystemReady",e)}));export{n as ACTION_TYPE,l as ActionHandler,e as CORE_MODULE,r as DEFAULTS,s as GROUP,o as ITEM_TYPE,t as MODULE,i as REQUIRED_CORE_MODULE_VERSION,c as RollHandler,d as SystemManager,a as Utils,register};
