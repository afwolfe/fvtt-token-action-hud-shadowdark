const t={ID:"token-action-hud-shadowdark"},e={ID:"token-action-hud-core"},s="1.5",n={attack:"SHADOWDARK.sheet.npc.attacks_label"},i={attacks:{id:"attacks",name:"SHADOWDARK.sheet.npc.attacks_label",type:"system"}},a={weapon:{groupId:"SHADOWDARK.inventory.section.weapon"}},o={thrown:"Compendium.shadowdark.properties.Item.c35ROL1nXwC840kC"};let l=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{l=class Utils{static getSetting(s,n=null){let i=n??null;try{i=game.settings.get(t.ID,s)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}return i}static async setSetting(s,n){try{n=await game.settings.set(t.ID,s,n),e.api.Logger.debug(`Setting '${s}' set to '${n}'`)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{console.log("Hello!"),c=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;a;async buildSystemActions(e){console.log("~~~~~~building system actions..."),this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,console.log(`actor: ${this.actor.name}`);if(console.log(`actorType = ${this.actorType}`),!this.actorType||["Player","NPC","Light"].includes(this.actorType)){if(this.displayUnequipped=l.getSetting("displayUnequipped"),this.actor){let e=Array.from(this.actor.items);e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=l.getSetting("abbreviateSkills"),this.addAuxiliaryActions=l.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=l.getSetting("addDamageAndCritical"),this.addStowedItems=l.getSetting("addStowedItems"),this.addUnequippedItems=l.getSetting("addUnequippedItems"),this.calculateAttackPenalty=l.getSetting("calculateAttackPenalty"),this.colorSkills=l.getSetting("colorSkills"),this.showStrikeImages=l.getSetting("showStrikeImages"),this.showStrikeNames=l.getSetting("showStrikeNames"),this.splitStrikes=l.getSetting("splitStrikes"),this.groupIds=e,"Player"===this.actorType&&this.#t()}}async#t(){console.log("building player actions"),await Promise.all([this.#e()])}async#e(){console.log("building strikes");const t=this.actor.itemTypes.Weapon;if(!t)return;const e=t.filter((t=>"melee"===t.system.type)),s=t.filter((t=>"ranged"===t.system.type||t.system.properties.some((t=>t===o.thrown))));console.log("melee:"),console.log(e),console.log("ranged:"),console.log(s);const n={id:"attacks",type:"system"},i={id:"melee",name:"Melee",type:"system-derived"},a={id:"ranged",name:"Ranged",type:"system-derived"};this.addGroup(i,n),this.addGroup(a,n),this.#s(e,i),this.#s(s,a)}async#n(t,e){return""}async#i(t,e){return""}async#s(t,e){for(const s of t){const t={id:encodeURIComponent(`${s.id}>${s.name.slugify()}>0>`+s.system.type),name:s.name,encodedValue:["attack",s.id].join(this.delimiter)};console.log(`encodedValue: ${t.encodedValue}`),this.addActions([t],e)}}async#a(t){return t?.name??t?.label??""}async#o(){}async#l(){}async#c(){}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class RollHandler extends t.api.RollHandler{async doHandleActionEvent(t,e){const s=e.split("|");2!==s.length&&super.throwInvalidValueErr();const n=s[0],i=s[1];console.log(`handling payload: ${n}, ${i}`);if(["attack"].includes(n)&&this.isRenderItem())return this.doRenderItem(this.actor,i);const a=["character"];if(this.actor)return void await this.#r(t,this.actor,this.token,n,i);const o=canvas.tokens.controlled.filter((t=>a.includes(t.actor?.type)));for(const e of o){const s=e.actor;await this.#r(t,s,e,n,i)}}async#r(t,e,s,n,i){if("attack"===n)this.#d(t,e,i)}#d(t,e,s){e.rollAttack(s)}#g(t,e,s){e.items.get(s).toChat(t)}async#u(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let d=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{console.log("Core Module:"),console.log(t);const e=i;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const s=Object.values(e);d={layout:[{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.attacks_label"),groups:[{...e.attacks,nestId:"attacks"}]},{nestId:"spells",id:"spells",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.spells"),groups:[{...e.spells,nestId:"spells_spells"}]},{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.tab.abilities"),groups:[{...e.abilities,nestId:"abilities_abilities"}]}],groups:s}}));let g=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{g=class SystemManager extends t.api.SystemManager{doGetActionHandler(){return new c}getAvailableRollHandlers(){return{core:"Core Template"}}doGetRollHandler(t){let e;return e=new r,e}doRegisterSettings(t){register(t)}async doRegisterDefaultFlags(){return d}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:g},Hooks.call("tokenActionHudSystemReady",e)}));export{n as ACTION_TYPE,c as ActionHandler,o as COMPENDIUM_ID,e as CORE_MODULE,d as DEFAULTS,i as GROUP,a as ITEM_TYPE,t as MODULE,s as REQUIRED_CORE_MODULE_VERSION,r as RollHandler,g as SystemManager,l as Utils,register};
