const t={ID:"token-action-hud-shadowdark"},e={ID:"token-action-hud-core"},i="1.5",s={attack:"SHADOWDARK.sheet.npc.attacks_label",ability:"SHADOWDARK.class-ability.ability.label",spell:"SHADOWDARK.item_type.spell"},a={attacks:{id:"attacks",name:"SHADOWDARK.sheet.npc.attacks_label",type:"system"},abilities:{id:"abilities",name:"SHADOWDARK.sheet.abilities.label",type:"system"},spells:{id:"spells",name:"SHADOWDARK.sheet.player.spells",type:"system"}},n={weapon:{groupId:"SHADOWDARK.inventory.section.weapon"}},l={thrown:"Compendium.shadowdark.properties.Item.c35ROL1nXwC840kC"},o={str:{name:"SHADOWDARK.ability_strength"},dex:{name:"SHADOWDARK.ability_dexterity"},con:{name:"SHADOWDARK.ability_constitution"},int:{name:"SHADOWDARK.ability_intelligence"},wis:{name:"SHADOWDARK.ability_wisdom"},cha:{name:"SHADOWDARK.ability_charisma"}};let c=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{c=class Utils{static getSetting(i,s=null){let a=s??null;try{a=game.settings.get(t.ID,i)}catch{e.api.Logger.debug(`Setting '${i}' not found`)}return a}static async setSetting(i,s){try{s=await game.settings.set(t.ID,i,s),e.api.Logger.debug(`Setting '${i}' set to '${s}'`)}catch{e.api.Logger.debug(`Setting '${i}' not found`)}}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;a;async buildSystemActions(e){this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type;if(!this.actorType||["Player","NPC","Light"].includes(this.actorType)){if(this.displayUnequipped=c.getSetting("displayUnequipped"),this.actor){let e=Array.from(this.actor.items);e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=c.getSetting("abbreviateSkills"),this.addAuxiliaryActions=c.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=c.getSetting("addDamageAndCritical"),this.addStowedItems=c.getSetting("addStowedItems"),this.addUnequippedItems=c.getSetting("addUnequippedItems"),this.calculateAttackPenalty=c.getSetting("calculateAttackPenalty"),this.colorSkills=c.getSetting("colorSkills"),this.showStrikeImages=c.getSetting("showStrikeImages"),this.showStrikeNames=c.getSetting("showStrikeNames"),this.splitStrikes=c.getSetting("splitStrikes"),this.groupIds=e,"Player"===this.actorType&&this.#t()}}async#t(){this.actor.backgroundItems?.class||this.actor._populateBackgroundItems(),await Promise.all([this.#e(),this.#i(),this.#s()])}async#s(){const t=this.actor.itemTypes.Weapon;if(!t)return;const e=t.filter((t=>"melee"===t.system.type)),i=t.filter((t=>"ranged"===t.system.type||t.system.properties.some((t=>t===l.thrown)))),s={id:"attacks",type:"system"},a={id:"melee",name:"Melee",type:"system-derived"},n={id:"ranged",name:"Ranged",type:"system-derived"};this.addGroup(a,s),this.addGroup(n,s),this.#a(e,a),this.#a(i,n)}async#e(){const e="ability",i=Object.keys(this.actor.system.abilities),s={id:"abilities",name:"Abilities",type:"system"},a=await Promise.all(i.map((async i=>{const s=i,a=t.api.Utils.i18n(o[i].name),n=[e,s].join(this.delimiter);return{id:s,name:a,encodedValue:n}})));this.addActions(a,s)}async#i(){const t=this.actor.itemTypes.Spell;if(!t)return;const e=Array.from(t.filter((t=>1===t.system.tier&&!t.system.lost))),i=Array.from(t.filter((t=>2===t.system.tier&&!t.system.lost))),s={id:"spells",type:"system"},a={id:"tier1",name:"Tier 1",type:"system-derived"},n={id:"tier2",name:"Tier 2",type:"system-derived"};await this.addGroup(a,s),await this.addGroup(n,s),await this.#n(e,a),await this.#n(i,n)}async#l(t,e){return""}async#o(t,e){return""}async#a(t,e){for(const i of t){const t={id:i.id,name:i.name,encodedValue:["attack",i.id].join(this.delimiter)};this.addActions([t],e)}}async#n(t,e){for(const i of t){const t={id:i.id,name:i.name,encodedValue:["spell",i.id].join(this.delimiter)};this.addActions([t],e)}}async#c(t){return t?.name??t?.label??""}async#d(){}async#r(){}async#p(){}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=a;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const i=Object.values(e);r={layout:[{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.attacks_label"),groups:[{...e.attacks,nestId:"attacks_attacks"}]},{nestId:"spells",id:"spells",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.spells"),groups:[{...e.spells,nestId:"spells_spells"}]},{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("SHADOWDARK.sheet.abilities.label"),groups:[{...e.abilities,nestId:"abilities_abilities"}]}],groups:i}}));let p=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{p=class RollHandler extends t.api.RollHandler{async doHandleActionEvent(t,e){const i=e.split("|");2!==i.length&&super.throwInvalidValueErr();const s=i[0],a=i[1];if(["attack"].includes(s)&&this.isRenderItem())return this.doRenderItem(this.actor,a);const n=["character"];if(this.actor)return void await this.#y(t,this.actor,this.token,s,a);const l=canvas.tokens.controlled.filter((t=>n.includes(t.actor?.type)));for(const e of l){const i=e.actor;await this.#y(t,i,e,s,a)}}async#y(t,e,i,s,a){switch(s){case"attack":await this.#u(t,e,a);break;case"ability":await this.#m(t,e,a);break;case"spell":await this.#h(t,e,a)}}async#u(t,e,i){e.rollAttack(i)}async#m(t,e,i){e.rollAbility(i,{event:t})}async#h(t,e,i){e.castSpell(i)}#A(t,e,i){e.items.get(i).toChat(t)}async#g(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let y=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{y=class SystemManager extends t.api.SystemManager{doGetActionHandler(){return new d}getAvailableRollHandlers(){return{core:"Core Template"}}doGetRollHandler(t){let e;return e=new p,e}doRegisterSettings(t){register(t)}async doRegisterDefaultFlags(){return r}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:y},Hooks.call("tokenActionHudSystemReady",e)}));export{o as ABILITY,s as ACTION_TYPE,d as ActionHandler,l as COMPENDIUM_ID,e as CORE_MODULE,r as DEFAULTS,a as GROUP,n as ITEM_TYPE,t as MODULE,i as REQUIRED_CORE_MODULE_VERSION,p as RollHandler,y as SystemManager,c as Utils,register};
