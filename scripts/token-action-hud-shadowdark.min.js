const t={ID:"token-action-hud-shadowdark"},e={ID:"token-action-hud-core"},s="1.5",i={attack:"SHADOWDARK.sheet.npc.attacks_label",ability:"SHADOWDARK.class-ability.ability.label",spell:"SHADOWDARK.item_type.spell"},a={attacks:{id:"attacks",name:"SHADOWDARK.sheet.npc.attacks_label",type:"system"},abilities:{id:"abilities",name:"SHADOWDARK.sheet.abilities.label",type:"system"},spells:{id:"spells",name:"SHADOWDARK.sheet.player.spells",type:"system"}},n={weapon:{groupId:"SHADOWDARK.inventory.section.weapon"}},l={thrown:"Compendium.shadowdark.properties.Item.c35ROL1nXwC840kC"},o={str:{name:"SHADOWDARK.ability_strength"},dex:{name:"SHADOWDARK.ability_dexterity"},con:{name:"SHADOWDARK.ability_constitution"},int:{name:"SHADOWDARK.ability_intelligence"},wis:{name:"SHADOWDARK.ability_wisdom"},cha:{name:"SHADOWDARK.ability_charisma"}};let c=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{c=class Utils{static getSetting(s,i=null){let a=i??null;try{a=game.settings.get(t.ID,s)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}return a}static async setSetting(s,i){try{i=await game.settings.set(t.ID,s,i),e.api.Logger.debug(`Setting '${s}' set to '${i}'`)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;a;async buildSystemActions(e){this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type;if(!this.actorType||["Player","NPC","Light"].includes(this.actorType)){if(this.displayUnequipped=c.getSetting("displayUnequipped"),this.actor){let e=Array.from(this.actor.items);e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=c.getSetting("abbreviateSkills"),this.addAuxiliaryActions=c.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=c.getSetting("addDamageAndCritical"),this.addStowedItems=c.getSetting("addStowedItems"),this.addUnequippedItems=c.getSetting("addUnequippedItems"),this.calculateAttackPenalty=c.getSetting("calculateAttackPenalty"),this.colorSkills=c.getSetting("colorSkills"),this.showAttackImages=c.getSetting("showAttackImages"),this.showAttackNames=c.getSetting("showAttackNames"),this.splitAttacks=c.getSetting("splitAttacks"),this.groupIds=e,"Player"===this.actorType?this.#t():"NPC"===this.actorType&&this.#e()}}async#t(){this.actor.backgroundItems?.class||this.actor._populateBackgroundItems(),await Promise.all([this.#s(),this.#i(),this.#a()])}async#a(){const t="attack",e=this.actor.itemTypes.Weapon;if(!e)return;const s=e.filter((t=>"melee"===t.system.type&&!t.system.stashed)),i=e.filter((t=>"ranged"===t.system.type||t.system.properties.some((t=>t===l.thrown))&&!t.system.stashed)),a={id:"attacks",type:"system"},n={id:"melee",name:"Melee",type:"system-derived"},o={id:"ranged",name:"Ranged",type:"system-derived"};this.addGroup(n,a),this.addGroup(o,a),this.#n(s,n,t),this.#n(i,o,t)}async#s(){const e="ability",s=Object.keys(this.actor.system.abilities),i={id:"abilities",name:"Abilities",type:"system"},a=await Promise.all(s.map((async s=>{const i=s,a=t.api.Utils.i18n(o[s].name),n=[e,i].join(this.delimiter);return{id:i,name:a,encodedValue:n}})));this.#n(a,i,e)}async#i(){const t="spell",e={id:"spells",name:"Spells",type:"system"},s=this.actor.itemTypes.Spell,i=[];for(const t of s)i.includes(t.system.tier)||i.push(t.system.tier);for(const a of i){const i={id:`tier${a}`,name:`Tier ${a}`,type:"system-derived"},n=s.filter((t=>t.system.tier===a&&!t.system.lost));this.addGroup(i,e,{update:!0}),this.#n(n,i,t)}const a=this.actor.itemTypes.Wand.filter((t=>t.system.class.includes(this.actor.system.class)&&!t.system.lost&&!t.system.stashed));if(console.log(a),a.length>0){const s={id:"spells_wands",name:"Wands",type:"system-derived"};this.addGroup(s,e),this.#n(a,s,t)}const n=this.actor.itemTypes.Scroll.filter((t=>t.system.class.includes(this.actor.system.class)&&!t.system.stashed));if(console.log(n),n.length>0){const s={id:"spells_scrolls",name:"Scrolls",type:"system-derived"};this.addGroup(s,e),this.#n(n,s,t)}}async#l(t,e){return""}async#o(t,e){return""}async#n(t,e,s){for(const i of t){const t={id:i.id,name:i.name,encodedValue:[s,i.id].join(this.delimiter)};this.addActions([t],e)}}async#c(t){return t?.name??t?.label??""}async#e(){}async#d(){}async#r(){}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class RollHandler extends t.api.RollHandler{async doHandleActionEvent(t,e){const s=e.split("|");console.log(`Handling: ${s}`),2!==s.length&&super.throwInvalidValueErr();const i=s[0],a=s[1];if(["attack"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,a);const n=["character"];if(this.actor)return void await this.#p(t,this.actor,this.token,i,a);const l=canvas.tokens.controlled.filter((t=>n.includes(t.actor?.type)));for(const e of l){const s=e.actor;await this.#p(t,s,e,i,a)}}async#p(t,e,s,i,a){switch(i){case"attack":await this.#y(t,e,a);break;case"ability":await this.#u(t,e,a);break;case"spell":await this.#m(t,e,a)}}async#y(t,e,s){e.rollAttack(s)}async#u(t,e,s){e.rollAbility(s,{event:t})}async#m(t,e,s){e.castSpell(s)}#h(t,e,s){e.items.get(s).toChat(t)}async#A(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let p=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=a;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const s=Object.values(e);p={layout:[{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.attacks_label"),groups:[{...e.attacks,nestId:"attacks_attacks"}]},{nestId:"spells",id:"spells",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.spells"),groups:[{...e.spells,nestId:"spells_spells"}]},{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("SHADOWDARK.sheet.abilities.label"),groups:[{...e.abilities,nestId:"abilities_abilities"}]}],groups:s}}));let y=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{y=class SystemManager extends t.api.SystemManager{doGetActionHandler(){return new d}getAvailableRollHandlers(){return{core:"Core Template"}}doGetRollHandler(t){let e;return e=new r,e}doRegisterSettings(t){register(t)}async doRegisterDefaultFlags(){return p}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:y},Hooks.call("tokenActionHudSystemReady",e)}));export{o as ABILITY,i as ACTION_TYPE,d as ActionHandler,l as COMPENDIUM_ID,e as CORE_MODULE,p as DEFAULTS,a as GROUP,n as ITEM_TYPE,t as MODULE,s as REQUIRED_CORE_MODULE_VERSION,r as RollHandler,y as SystemManager,c as Utils,register};
