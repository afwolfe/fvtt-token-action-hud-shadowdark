const t={ID:"token-action-hud-shadowdark"},e={ID:"token-action-hud-core"},s="1.5",i={attack:"SHADOWDARK.sheet.npc.attacks_label",ability:"SHADOWDARK.class-ability.ability.label",spell:"SHADOWDARK.item_type.spell",perform:"Perform",herbalism:"Herbalism",item:"tokenActionHud.template.item",light:"SHADOWDARK.sheet.item.tab.light",feature:"SHADOWDARK.sheet.npc.features_label"},n={inventory:{id:"inventory",name:"SHADOWDARK.sheet.player.tab.inventory",type:"system"},attacks:{id:"attacks",name:"SHADOWDARK.sheet.npc.attacks_label",type:"system"},abilities:{id:"abilities",name:"SHADOWDARK.sheet.abilities.label",type:"system"},spells:{id:"spells",name:"SHADOWDARK.sheet.player.spells",type:"system"},perform:{id:"perform",name:"Perform",type:"system"},herbalism:{id:"herbalism",name:"Herbalism",type:"system"},light:{id:"light",name:"SHADOWDARK.sheet.item.tab.light",type:"system"},features:{id:"features",name:"SHADOWDARK.sheet.npc.features_label",type:"system"}},a={str:{name:"SHADOWDARK.ability_strength"},dex:{name:"SHADOWDARK.ability_dexterity"},con:{name:"SHADOWDARK.ability_constitution"},int:{name:"SHADOWDARK.ability_intelligence"},wis:{name:"SHADOWDARK.ability_wisdom"},cha:{name:"SHADOWDARK.ability_charisma"}},o={thrown:'<i class="fa-solid fa-share"></i>',wand:'<i class="fa-solid fa-wand-magic-sparkles"></i>',scroll:'<i class="fa-solid fa-scroll"></i>',flame:'<i class="fa-solid fa-fire-flame-curved"></i>',close:'<i class="fa-solid fa-circle-c"></i>',near:'<i class="fa-solid fa-circle-n"></i>',far:'<i class="fa-solid fa-circle-f"></i>',self:'<i class="fa-solid fa-circle-user"></i>'};let l=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{l=class Utils{static getSetting(s,i=null){let n=i??null;try{n=game.settings.get(t.ID,s)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}return n}static async setSetting(s,i){try{i=await game.settings.set(t.ID,s,i),e.api.Logger.debug(`Setting '${s}' set to '${i}'`)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{function _toTitleCase(t){return t.replace(/\w\S*/g,(function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()}))}c=class ActionHandler extends t.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;a;async buildSystemActions(e){this.actors=this.actor?[this.actor]:this.#t(),this.actorType=this.actor?.type;if(!this.actorType||["Player","NPC","Light"].includes(this.actorType)){if(this.displayUnequipped=l.getSetting("displayUnequipped"),this.actor){let e=Array.from(this.actor?.items);e=t.api.Utils.sortItemsByName(e),this.items=e}this.abbreviateSkills=l.getSetting("abbreviateSkills"),this.addAuxiliaryActions=l.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=l.getSetting("addDamageAndCritical"),this.addStowedItems=l.getSetting("addStowedItems"),this.addUnequippedItems=l.getSetting("addUnequippedItems"),this.calculateAttackPenalty=l.getSetting("calculateAttackPenalty"),this.colorSkills=l.getSetting("colorSkills"),this.showAttackImages=l.getSetting("showAttackImages"),this.showAttackNames=l.getSetting("showAttackNames"),this.splitAttacks=l.getSetting("splitAttacks"),this.showAttackBonus=l.getSetting("showAttackBonus"),this.showAbilityBonus=l.getSetting("showAbilityBonus"),this.wandScrollIcon=l.getSetting("wandScrollIcon"),this.hideLantern=l.getSetting("hideLantern"),this.showAttackRanges=l.getSetting("showAttackRanges"),this.showSpellRanges=l.getSetting("showSpellRanges"),this.groupIds=e,"Player"===this.actorType?await this.#e():"NPC"===this.actorType?await this.#s():this.actor||this.#i()}}async#e(){await Promise.all([this.#n(),this.#a(),this.#o(),this.#l(),this.#c(),this.#r(),this.#d()])}async#s(){this.actor?.backgroundItems?.class||this.actor?._populateBackgroundItems(),await Promise.all([this.#h(),this.#m(),this.#n()])}async#i(){await Promise.all([this.#n()])}#t(){const t=["Player","NPC"],e=canvas.tokens.controlled.map((t=>t.actor));if(e.every((e=>t.includes(e?.type))))return e}async#c(){const t=this.actor?.itemTypes.Weapon.filter((t=>!t.system.stashed));if(!t||0===t?.length)return;const e="attack",s=[],i=[];if(this.showAttackBonus)for(const n of t){const t=this.actor?.calcWeaponMasterBonus(n),a=await n.isFinesseWeapon()?Math.max(this.actor?.attackBonus("melee"),this.actor?.attackBonus("ranged")):this.actor?.attackBonus(n.system.type);if("melee"===n.system.type){const l=a+this.actor?.system.bonuses.meleeAttackBonus+n.system.bonuses.attackBonus+t;if(s.push(new Action(n,e,{name:n.name+this.#u(l),range:this.showAttackRanges?"close":void 0})),await n.hasProperty("thrown")){const s=a+parseInt(this.actor?.system.bonuses.rangedAttackBonus,10)+parseInt(n.system.bonuses.attackBonus,10)+t;i.push(new Action(n,e,{icon2:o.thrown,name:n.name+this.#u(s),range:this.showAttackRanges?n.system.range:void 0}));continue}}else if("ranged"===n.system.type){const s=a+this.actor?.system.bonuses.rangedAttackBonus+n.system.bonuses.attackBonus+t;i.push(new Action(n,e,{name:n.name+this.#u(s),range:this.showAttackRanges?n.system.range:void 0}))}}else for(const n of t)if("melee"===n.system.type){if(s.push(new Action(n,e,{range:this.showAttackRanges?n.system.range:void 0})),await n.hasProperty("thrown")){i.push(new Action(n,e,{icon2:o.thrown}));continue}}else"ranged"===n.system.type&&i.push(new Action(n,e,{range:this.showAttackRanges?n.system.range:void 0}));if(s.length>0){const t={id:"melee",name:"Melee",type:"system-derived"};this.addGroup(t,n.attacks),this.addActions(s,t)}if(i.length>0){const t={id:"ranged",name:"Ranged",type:"system-derived"};this.addGroup(t,n.attacks),this.addActions(i,t)}}async#n(){const e="ability",s=await Promise.all(["str","dex","con","int","wis","cha"].map((async s=>{const i=s,n=t.api.Utils.i18n(a[s].name)+(this.showAbilityBonus&&this.actor?this.#u(this.actor?.system.abilities[s].mod):""),o=[e,i].join(this.delimiter);return{id:i,name:n,encodedValue:o}})));this.addActions(s,n.abilities)}async#a(){const t="spell",e=this.actor?.itemTypes.Spell;if(e.length>0){const s=[];for(const t of e)s.includes(t.system.tier)||s.push(t.system.tier);for(const i of s){const s={id:`tier${i}`,name:`Tier ${i}`,type:"system-derived"},a=e.filter((t=>t.system.tier===i&&!t.system.lost)).map((e=>new Action(e,t,{range:this.showSpellRanges?e.system.range:void 0})));this.addGroup(s,n.spells),this.addActions(a,s)}}const s=this.actor?.itemTypes.Wand,i=s.filter((t=>t.system.class.includes(this.actor?.system.class)&&!t.system.lost&&!t.system.stashed));if(i.length>0){const e={id:"spells_wands",name:"Wands",type:"system-derived"},s=i.map((e=>new Action(e,t,{name:e.system.spellName,icon2:this.wandScrollIcon?o.wand:void 0,range:this.showSpellRanges?e.system.range:void 0})));this.addGroup(e,n.spells),this.addActions(s,e)}const a=this.actor?.itemTypes.Scroll,l=a.filter((t=>t.system.class.includes(this.actor?.system.class)&&!t.system.stashed));if(l.length>0){const e={id:"spells_scrolls",name:"Scrolls",type:"system-derived"},s=l.map((e=>new Action(e,t,{name:e.system.spellName,icon2:this.wandScrollIcon?o.scroll:void 0,range:this.showSpellRanges?e.system.range:void 0})));this.addGroup(e,n.spells),this.addActions(s,e)}}async#o(){if(this.actor.itemTypes.Talent.find((t=>"Perform"===t.name))){const t=this.actor?.itemTypes["Class Ability"];if(!t||0===t?.length)return;const e="classAbility",s=[...t].map((t=>new Action(t,e)));s.length>0&&this.addActions(s,n.perform)}}async#l(){if(this.actor.itemTypes.Talent.find((t=>"Herbalism"===t.name))){const t=this.actor?.itemTypes["Class Ability"];if(console.log(t),!t||0===t?.length)return;const e="classAbility",s=[...t].map((t=>new Action(t,e)));console.log(s),s.length>0&&this.addActions(s,n.herbalism)}}async#r(){const t="item",e=["Armor","Basic","Potion","Scroll","Wand","Weapon"],s=["Gem"],i=[];for(const s of e){const e=this.actor?.itemTypes[s].filter((t=>!t.system.stashed));if(!e||0===e?.length)continue;const a=[];for(const t of e)t.system.treasure?i.push(t):a.push(t);const o={id:`inventory_${s.slugify()}`,name:s,type:"system-derived"};if(a.length>0){this.addGroup(o,n.inventory);const e=a.map((e=>new Action(e,t)));this.addActions(e,o)}}for(const t of s)for(const e of this.actor?.itemTypes[t])i.push(e);if(!i||0===i?.length)return;const a={id:"inventory_treasure",name:"Gems and Treasure",type:"system-derived"},o=i.map((e=>new Action(e,t)));this.addGroup(a,n.inventory),this.addActions(o,a)}async#d(){const t="light",e=[];for(const t of this.actor?.itemTypes.Basic.filter((t=>t.system.light.isSource)))t.system.light.remainingSecs&&(this.hideLantern&&"Oil, Flask"===t.name?this.actor?.itemTypes.Basic.some((t=>"Lantern"===t.name))&&e.push(t):e.push(t));const s=await Promise.all(e.map((async e=>e.system.light.active?new Action(e,t,{icon2:o.flame}):new Action(e,t))));this.addActions(s,n.light)}async#h(){const t=this.actor?.itemTypes["NPC Attack"];if(!t||0===t?.length)return;const e="attack",s=[],i=[];for(const n of t){const t=n.system.ranges;if(t.includes("close")){if(s.push(new Action(n,e,{name:_toTitleCase(n.name)+`${this.showAttackBonus?this.#u(n.system.bonuses.attackBonus):""}`,range:this.showAttackRanges?"close":void 0})),t.includes("near")||t.includes("far")){const s=t.includes("far")?"far":"near";i.push(new Action(n,e,{icon2:o.thrown,name:_toTitleCase(n.name)+`${this.showAttackBonus?this.#u(n.system.bonuses.attackBonus):""}`,range:this.showAttackRanges?s:void 0}));continue}}else if(t.includes("near")||t.includes("far")){const s=t.includes("far")?"far":"near";i.push(new Action(n,e,{name:_toTitleCase(n.name)+`${this.showAttackBonus?this.#u(n.system.bonuses.attackBonus):""}`,range:this.showAttackRanges?s:void 0}))}}if(s.length>0){const t={id:"melee",name:"Melee",type:"system-derived"};this.addGroup(t,n.attacks),this.addActions(s,t)}if(i.length>0){const t={id:"ranged",name:"Ranged",type:"system-derived"};this.addGroup(t,n.attacks),this.addActions(i,t)}}async#m(){const t=this.actor?.itemTypes["NPC Feature"];if(!t||0===t?.length)return;const e=await Promise.all(t.map((async t=>new Action(t,"feature"))));this.addActions(e,n.features)}#u(t){return` (${t>=0?"+":""}${t})`}};class Action{constructor(e,s,i){this.id=e.id,this.name=i?.name||e.name,this.encodedValue=[s,e.id].join("|"),this.img=t.api.Utils.getImage(e),this.icon1=o[i?.range],this.icon2=i?.icon2}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=n;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const s=Object.values(e);r={layout:[{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.attacks_label"),groups:[{...e.attacks,nestId:"attacks_attacks"}]},{nestId:"spells",id:"spells",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.spells"),groups:[{...e.spells,nestId:"spells_spells"}]},{nestId:"perform",id:"perform",name:"Perform",groups:[{...e.perform,nestId:"perform_perform"}]},{nestId:"herbalism",id:"herbalism",name:"Herbalism",groups:[{...e.herbalism,nestId:"herbalism_herbalism"}]},{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("SHADOWDARK.sheet.abilities.label"),groups:[{...e.abilities,nestId:"abilities_abilities"}]},{nestId:"inventory",id:"inventory",name:t.api.Utils.i18n("SHADOWDARK.sheet.player.tab.inventory"),groups:[{...e.inventory,nestId:"inventory_inventory"}]},{nestId:"light",id:"light",name:t.api.Utils.i18n("SHADOWDARK.sheet.item.tab.light"),groups:[{...e.light,nestId:"light_light"}]},{nestId:"features",id:"features",name:t.api.Utils.i18n("SHADOWDARK.sheet.npc.features_label"),groups:[{...e.features,nestId:"features_features"}]}],groups:s}}));let d=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"showAttackBonus",{name:"Show Roll Bonus for Attacks",hint:"Show roll bonus for attacks",scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"showAbilityBonus",{name:"Show Roll Bonus for Abilities",hint:"Show roll bonus for abilities",scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"showAttackRanges",{name:"Show Range Icons for Attacks",hint:"Show range icons for attacks",scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}}),game.settings.register(t.ID,"showSpellRanges",{name:"Show Range Icons for Spells",hint:"Show range icons for spells",scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{e(t)}}),game.settings.register(t.ID,"wandScrollIcon",{name:"Show Icon for Wands and Scrolls",hint:"Abbreviate wand and scroll names with icons",scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}}),game.settings.register(t.ID,"hideLantern",{name:"Hide Oil When No Lantern Equipped",hint:"Hide oil from the Light menu when no lantern is present",scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class RollHandler extends t.api.RollHandler{async doHandleActionEvent(t,e){const s=e.split("|");console.log(s),2!==s.length&&super.throwInvalidValueErr();const i=s[0],n=s[1],a=["Player","NPC"];if(this.actor)return void await this.#g(t,this.actor,this.token,i,n);const o=canvas.tokens.controlled.filter((t=>a.includes(t.actor?.type)));for(const e of o){const s=e.actor;await this.#g(t,s,e,i,n)}}async#g(t,e,s,i,n){switch(i){case"attack":await this.#p(t,e,n);break;case"ability":await this.#y(t,e,n);break;case"spell":await this.#A(t,e,n);break;case"item":case"feature":this.#f(t,e,n);break;case"light":this.#b(t,e,n);break;case"classAbility":this.#w(t,e,n)}}async#p(t,e,s){e.rollAttack(s)}async#y(t,e,s){e.rollAbility(s,{event:t})}async#A(t,e,s){e.castSpell(s)}async#w(t,e,s){e.useAbility(s)}#f(t,e,s){e.items.get(s).displayCard()}#b(t,e,s){const i=e.getEmbeddedDocument("Item",s);i.parent.sheet._toggleLightSource(i)}}}));let h=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{h=class SystemManager extends t.api.SystemManager{doGetActionHandler(){return new c}getAvailableRollHandlers(){return{core:"Core Template"}}doGetRollHandler(t){let e;return e=new d,e}doRegisterSettings(t){register(t)}async doRegisterDefaultFlags(){return r}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:h},Hooks.call("tokenActionHudSystemReady",e)}));export{a as ABILITY,i as ACTION_TYPE,c as ActionHandler,e as CORE_MODULE,r as DEFAULTS,n as GROUP,o as ICON,t as MODULE,s as REQUIRED_CORE_MODULE_VERSION,d as RollHandler,h as SystemManager,l as Utils,register};
